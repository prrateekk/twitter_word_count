# MODULE IMPORTS

import sys
import datetime
import time

# FLASK PYTHON FRAMEWORK
from flask import Flask,redirect,url_for,request,render_template
# TWITTER API 
import tweepy  
from tweepy import OAuthHandler
# FOR CURRENT STREAMING TWEETS
from tweepy import Stream
from tweepy.streaming import StreamListener

# Variables that contains the user credentials to access Twitter API
# CREATE AN APP AND GET KEY HERE - https://apps.twitter.com/
consumer_key = 'GvuJG3OcyAofQefYr96Hcz9od'
consumer_secret = '7gx0oksFNoMt2Ul7oAZAW5tWSGmsAYBMhhP7oolqMwF61YLzQx'
access_token = '370005978-f2vUKEv0PIWAUJcHZ27q997MIeumWhM28OTAeV0W'
access_secret = 'thtMjZRM9xc9xOo9ckT4Wqm0ZLLnCyUZDkC33EOQYNh1o'

auth = OAuthHandler(consumer_key,consumer_secret)
auth.set_access_token(access_token,access_secret)

# initialize the connection to the twitter API through OAUTH
api = tweepy.API(auth)

# app initialised through FLASK - FRAMEWORK
app = Flask(__name__)

# Global variable that will store the result.
count=None

# STREAMLISTENER API used to collect CURRENTLY STREAMING TWEETS.
class MyListener(StreamListener):
	# initializes the variables to be used namely - Time Duration, Global variable count to 0.
    def __init__(self, time_limit):
        global count
        count = 0
        self.time = time.time()
        self.limit = time_limit

    # runs on FETCHING DATA with matching name .
    def on_data(self, data):
        global count
        # Loop keeps on fetching data and incrementing count until the time limit is reached.
        while ((time.time() - self.time) < self.limit):
            try:
                count+=1
                return True
            except BaseException as e:
                time.sleep(5)
                pass
        return False
# StreamListener Class Ends Here.

# REST API that fetches data from the past days till today.
# As per the API documentation twitter allows the user to access Tweets that are no more than 7 days old.
def past(name,d):
	# Global variable count initialized to 0
	global count
	count = 0
	# variable u storing todays date.
	u=datetime.date.today()
	# Cursor searching for tweet with matching query 'q=name'
	# 'since' refers to the starting date
	# 'until' refers to today's date
	# whenever the tweet with the matching query is fetched the count variable is incremented by one.
	for tweet in tweepy.Cursor(api.search,q=name,since=u-datetime.timedelta(d),until=u,lang='en').items():
		count+=1
# REST API ends here.


# Flask routing.
# local host with template index.html(can be found in the template folder)
@app.route('/')
def index():
	return render_template('index.html')


# Final Page where the the above API functions are called and calculations are done.
@app.route('/success/<name>/<tme>')
# 'name' refers to the word to be searched
# 'tme' refers to the time duration
def success(name,tme):
	global count

	# Splits the time duration into relevant information
	d,waste1,waste2 = tme.split()
	d=eval(d)

	# runs when needs to make STREAMLISTENER API Calls
	if d>7:
		twitter_stream = Stream(auth, MyListener(time_limit=d))
		twitter_stream.filter(track=[name])
	else:
		# runs when needs to make REST API Calls
		past(name,d)

	return render_template('welcome.html',count=count,name=name,duration=tme)


# collects the input data from the FORM and then redirects the input to the next page
@app.route('/login',methods = ['POST', 'GET'])
def login():
	# when needs to make POST request
	if request.method == 'POST':
		user = request.form['nm']
		tme = request.form['tm']
		return redirect(url_for('success',name=user,tme=tme))
	# when needs to male GET request
	else:
		user = request.args.get('nm')
		tme = request.args.get('tm')
		return redirect(url_for('success',name=user,tme=tme))

# runs the APP
if __name__ == '__main__':
	app.run(debug = True)

